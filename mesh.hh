#ifndef MESH_H_
# define MESH_H_

#include <eigen3/Eigen/Dense>
#include "GPUBuffer.hh"
#include "core.hh"
#include "material.hh"
#include "controller.hh"

namespace GRand {
    class Mesh {
	private:
	    Core* _core;
	    Material* _material;
	    GPUBuffer _gb;
	    //because the controller is generated by Mesh I need to manage the memory for the user
	    std::shared_ptr<Controller> _remote; 
	    Controller::matType _transform;
	    void _render() const noexcept;
	    void _uploadBuffer() noexcept;
	public:
	    explicit Mesh(Core* e, Material*);
	    void set(const GPUBuffer&)noexcept;
	    void fromFile(const std::string&);
	    Controller* genController();
	    Controller* getController();
	    void setExistantController(std::shared_ptr<Controller>);
	    void setMaterial(Material* m_) { _material = m_; }
	    ~Mesh();
    };
}

#endif /* !MESH_H_ */
